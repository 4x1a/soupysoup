from PIL import Image, ImageOpsimport pillow_heifimport pillow_avifimport osfrom pathlib import Path# Register format supportpillow_heif.register_heif_opener()SUPPORTED_EXTS = {'.png', '.jpg', '.jpeg', '.webp', '.heic', '.heif', '.avif', '.tiff', '.tif'}# === Modified process function that takes a PIL.Image ===def process_image_object(img, output_path):    img = img.convert("RGBA")    datas = img.getdata()    # Convert white to transparent    new_data = []    for item in datas:        if item[:3] == (255, 255, 255):            new_data.append((255, 255, 255, 0))        else:            new_data.append(item)    img.putdata(new_data)    # Crop to content    bbox = img.getbbox()    if not bbox:        raise ValueError("Image is fully transparent.")    img_cropped = img.crop(bbox)    # Padding    cropped_width, cropped_height = img_cropped.size    top_pad = int(cropped_height * 0.25)    bottom_pad = int(cropped_height * 0.10)    side_pad = int(cropped_width * 0.10)    padded_width = cropped_width + side_pad * 2    padded_height = cropped_height + top_pad + bottom_pad    padded_img = Image.new("RGBA", (padded_width, padded_height), (255, 255, 255, 0))    padded_img.paste(img_cropped, (side_pad, top_pad))    # Square canvas    final_size = max(padded_width, padded_height)    square_img = Image.new("RGBA", (final_size, final_size), (255, 255, 255, 0))    paste_x = (final_size - padded_width) // 2    paste_y = (final_size - padded_height) // 2    square_img.paste(padded_img, (paste_x, paste_y))    square_img.save(output_path, "PNG")# === Batch Processor ===def batch_process_images(src_root, dst_root):    src_root = Path(src_root)    dst_root = Path(dst_root)    dst_root.mkdir(parents=True, exist_ok=True)    for subdir in src_root.iterdir():        if not subdir.is_dir():            continue        dst_subdir = dst_root / subdir.name        dst_subdir.mkdir(parents=True, exist_ok=True)        for img_path in subdir.iterdir():            if img_path.suffix.lower() not in SUPPORTED_EXTS:                continue            filename = img_path.stem            dst_filename = f"{filename}.png"            dst_path = dst_subdir / dst_filename            # Avoid filename collisions            count = 1            while dst_path.exists():                dst_filename = f"{filename}_{count}.png"                dst_path = dst_subdir / dst_filename                count += 1            try:                # Open and process directly without temp file                img = Image.open(img_path)                process_image_object(img, str(dst_path))                # Delete original after successful processing                img_path.unlink()                print(f"✅ Processed and deleted: {img_path.name} → {dst_path.name}")            except Exception as e:                print(f"❌ Failed: {img_path.name} ({e})")ROOT_DIR = '/Users/annax/Desktop/soupysoup/Archive'NEW_DIR = '/Users/annax/Desktop/soupysoup/betterimages'batch_process_images(ROOT_DIR, NEW_DIR)